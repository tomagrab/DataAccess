@page "/update-person/{id:int}"
@inject IPeopleData peopleData
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Update Person</PageTitle>

<h1 class="text-3xl font-bold">
    update person
</h1>

<p class="text-lg py-4">
    The form below allows you to update a person. Upon valid submission,
    the person will be updated in the database. Additionally, you will be
    redirected to the read page.
</p>

@if (person is null)
{
    <p>Loading...</p>
}
else
{
    <div class="flex flex-col">
        <EditForm Model="@person" method="POST" FormName="CreatePersonForm" OnValidSubmit="@UpdatePerson" class="flex-1 flex flex-col items-center gap-4 shadow-md border rounded p-4 bg-darkgray">
            <h3 class="text-white font-bold">Create Person</h3>
            <DataAnnotationsValidator />

            <div class="form-group">
                <InputText id="FirstName" class="input" @bind-Value="person.FirstName" placeholder="First name" />
                <ValidationMessage For="@(() => person.FirstName)" class="error-text"/>
            </div>

            <div class="form-group">
                <InputText id="LastName" class="input" @bind-Value="person.LastName" placeholder="Last name" />
                <ValidationMessage For="@(() => person.LastName)" class="error-text" />
            </div>
            <button type="submit" class="btn btn-primary btn-base">Update</button>
        </EditForm>
    </div>
}

@code
{
    [Parameter]
    public int Id { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        person = null;
        person = await peopleData.GetPersonById(Id);
    }
    private PersonModel? person = new PersonModel();

    private async Task UpdatePerson()
    {
        await peopleData.UpdatePerson(person);
        navigationManager.NavigateTo("/read-people");
    }
}
